  Start
  = NewLineOrCommentBlock? 
    trs:(
      tr:Transaction Newline?
        NewLineOrCommentBlock? {return tr}
    )*
    { return trs }

NewLineOrCommentBlock = (Comment / Newline)*
    
Transaction
  = fl:FirstLine
    sls:(sl:SecondLine { return sl} )+
    { return { header:fl, postings:sls }}

FirstLine
  = d:Date _* tg:(tag:ClearingTag _ { return tag })? swt:StringWithTags? Newline
  {
    return { date:d, title:swt.str, tag:tg, tags:swt.tags }
  }

SecondLine
  =
  _+
  ct:(ct:ClearingTag _ { return ct })?
  a:Account
  _*
  c:CurrencyCombinations?
  _*
  cm:Comment?
  Newline?
  {
    return {
      tag:ct,
      account:a,
      sign:c ? c.sign : null,
      amount:c ? c.amount : null,
      currency:c ? c.currency : null,
      comment:cm ? cm.str : null,
      tags:cm ? cm.tags : []
    }
  }

Comment
  = CommentStartChars _* str:StringWithTags { return str; }
  
CommentStartChars = [';']

CurrencyCombinations = a1:Line / a2:Line2 / a3:Line3

Line = 
    sign:'-'? _* num:Number _* n:CurrencyName?
    {
      return { sign:sign, currency:n, amount:num }
    }
    
Line2 = 
    sign:'-'? _* n:CurrencyName? _* num:Number
    {
      return { sign:sign, currency:n, amount:num }
    }
    
Line3 =
  n:CurrencyName? _* sign:'-'? _* num:Number
    {
      return { sign:sign, currency:n, amount:num }
    }
    
Number = $([0-9]+ ('.' decimals:[0-9]*)?)
  
CurrencyName
  = '"' chars:CurrencyNameWithEscaping '"' { return chars.join("") }
  / chars:CurrencyNameWithoutEscaping { return chars.join("") }

CurrencyNameWithoutEscaping
  = (!(CommentStartChars / Newline / "-" / "+" / '"' / [0-9] / _) c:. { return c })+

CurrencyNameWithEscaping 
  = (!(CommentStartChars / Newline / "-" / "+" / '"') c:. { return c })+

Date
  = d:((d:[0-9]+ {return d.join("")})'/'(m:[0-9]+ { return m.join("") })'/'(y:[0-9]+ { return y.join("")} )) 
  { return d.join("") }

ClearingTag
  = ['*','!']

Title
  = t:(!('\\n') .)+ { return t.join("") }

StringWithTags = rs:RawString {
  const t = rs.split(':');
    
    if(t.length > 2) { //there is a tag in it
      const tags = t.splice(1, t.length - 2);
      return { str:t.join(''), tags }
    } else {
      return { str:rs, tags:[] } 
    }
}

RawString = chars:(!Newline c:. { return c })* { return chars.join("") }

Account
  =  letters:(!"  " !"\t" !"\n" letter:. { return letter })* 
  {
    return letters.join("")
  }

_ "whitespace or tab"
  = [' ', '\t']

Newline
= '\n' / '\n\r'/ '\r\n' / '\r'